; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\TILEMAP.C"
	.assume ADL=1
	SEGMENT BSS
_keepWaterTick:
	DS	1
	SEGMENT TEXT
_pipes:
	DB	10
	DB	6
	DB	9
	DB	7
	DB	3
	DB	8
	DB	6
	DB	3
	DB	12
	DB	5
	DB	8
	DB	4
	DB	5
	DB	9
	DB	15
	DB	15
;    1	#include "main.h"
;    2	#include "array.h"
;    3	#include "fire.h"
;    4	#include "tilemap.h"
;    5	#include "sprites.h"
;    6	#include "engine.h"
;    7	#include "graphics.h"
;    8	#include "water.h"
;    9	#include "util.h"
;   10	
;   11	
;   12	// these are not required to be in a particular order
;   13	const pipe_t pipes[] = {
	SEGMENT CODE
;   14		{BIT_RIGHT | BIT_DOWN, TILE_PIPE_BOT_RIGHT},
;   15		{BIT_LEFT | BIT_DOWN, TILE_PIPE_BOT_LEFT},
;   16		{BIT_LEFT | BIT_RIGHT, TILE_PIPE_HORIZONTAL},
;   17		{BIT_UP | BIT_RIGHT, TILE_PIPE_TOP_RIGHT},
;   18		{BIT_DOWN | BIT_UP, TILE_PIPE_VERTICAL},
;   19		{BIT_DOWN, TILE_SPOUT_BOT},
;   20		{BIT_LEFT | BIT_UP, TILE_PIPE_TOP_LEFT},
;   21		{BIT_LEFT | BIT_UP | BIT_DOWN | BIT_RIGHT, TILE_PIPE_ALL},
;   22	};
;   23	
;   24	
;   25	void loadMap(mapstore_t map) {
_loadMap:
	LD	HL,-32
	CALL	__frameset
;   26		unsigned int i;
;   27		uint8_t *data = map.data;
	LD	BC,(IX+10)
	LD	(IX+-9),BC
;   28		const unsigned int area = (unsigned int)map.width * (unsigned int)map.height;
	LD	A,(IX+8)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(IX+9)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	CALL	__imulu
	LD	(IX+-12),HL
;   29	
;   30		curLevel.width = map.width;
	LD	A,(IX+8)
	LD	(_curLevel+4),A
;   31		curLevel.height = map.height;
	LD	A,(IX+9)
	LD	(_curLevel+5),A
;   32		curLevel.px = map.sx;
	LD	A,(IX+6)
	LD	(_curLevel),A
;   33		curLevel.py = map.sy;
	LD	A,(IX+7)
	LD	(_curLevel+1),A
;   34		curLevel.ox = (SCREEN_WIDTH/2) - map.width * (8*SCALEBY/2);
	LD	A,(IX+8)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,160
	SUB	A,B
	LD	(_curLevel+2),A
;   35		curLevel.oy = (SCREEN_HEIGHT/2) - map.height * (4*SCALEBY);
	LD	A,(IX+9)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,120
	SUB	A,B
	LD	(_curLevel+3),A
;   36		curLevel.data = malloc(area * sizeof(tile_t));
	LD	HL,(IX+-12)
	LD	A,7
	CALL	__imul_b
	PUSH	HL
	CALL	_malloc
	POP	BC
	LD	(_curLevel+6),HL
;   37	
;   38		// if compressed, then we will expand it
;   39		if(map.rleSize)
	LD	A,(IX+13)
	OR	A,A
	JR	Z,L_1
;   40		{
;   41			uint8_t *copy = map.data;
	LD	BC,(IX+10)
	LD	(IX+-25),BC
;   42			data = malloc(area);
	LD	BC,(IX+-12)
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(IX+-9),HL
;   43			assert(data);
;   44			rleDecompress(copy, &data, map.rleSize);
	LD	A,(IX+13)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PEA	IX+-9
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_rleDecompress
	POP	BC
	POP	BC
	POP	BC
;   45		}
L_1:
;   46	
;   47		assert(curLevel.data);
;   48	
;   49		for(i = 0; i < area; i++)
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_12
L_10:
;   50		{
;   51			tile_t *t = &curLevel.data[i];
	LD	HL,(IX+-3)
	LD	A,7
	CALL	__imul_b
	LD	BC,(_curLevel+6)
	ADD	HL,BC
	LD	(IX+-6),HL
;   52			tilesprite_t tiledata = lookupTile(data[i]);
	LD	BC,(IX+-3)
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	PEA	IX+-32
	CALL	_lookupTile
	POP	BC
	POP	BC
	LEA	DE,IX+-22
	LD	BC,7
	LDIR	
;   53	
;   54			t->id = tiledata.id;
	LD	A,(IX+-22)
	LD	IY,(IX+-6)
	LD	(IY+6),A
;   55			t->flags = tiledata.flags;
	LD	A,(IX+-18)
	LD	(IY+2),A
;   56			
;   57			if(tiledata.id == TILE_FIRE_1 || tiledata.id == TILE_BLUE_FIRE_1)
	LD	A,(IX+-22)
	CP	A,10
	JR	Z,L_8
	LD	A,(IX+-22)
	CP	A,16
	JR	NZ,L_9
L_8:
;   58			{
;   59				createFire(t);
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_createFire
	POP	BC
;   60			} else
	JR	L_11
L_9:
;   61			{	
;   62				t->data.hasWater = false;
	LD	IY,(IX+-6)
	LD	(IY+0),0
;   63				t->type = pipeFromIndex(tiledata.id) ? TYPE_PIPE : TYPE_BLOCK;
	LD	C,(IX+-22)
	LD	B,0
	PUSH	BC
	CALL	_pipeFromIndex
	POP	BC
	CALL	__icmpzero
	JR	Z,L_6
	LD	BC,1
	LD	(IX+-15),BC
	JR	L_7
L_6:
	LD	BC,0
	LD	(IX+-15),BC
L_7:
	LD	BC,(IX+-15)
	LD	IY,(IX+-6)
	LD	(IY+3),BC
;   64			}
;   65	
;   66		}
L_11:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_12:
	LD	BC,(IX+-12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_10
;   67	
;   68		// free alloted memory
;   69		if(map.rleSize)
	LD	A,(IX+13)
	OR	A,A
	JR	Z,L_15
;   70		{
;   71			free(data);
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_free
	POP	BC
;   72		}
L_15:
;   73	
;   74	
;   75		drawLevel();
	CALL	_drawLevel
;   76		player.x = curLevel.px;
	LD	A,(_curLevel)
	LD	(_player),A
;   77		player.y = curLevel.py;
	LD	A,(_curLevel+1)
	LD	(_player+1),A
;   78		initFire();
	CALL	_initFire
;   79		initAnimations();
	CALL	_initAnimations
;   80		Array_Clear(&flows);
	LD	BC,_flows
	PUSH	BC
	CALL	_Array_Clear
	POP	BC
;   81	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _loadMap ***************************
;Name                         Addr/Register   Size   Type
;_flows                              IMPORT     12   variable
;_Array_Clear                        IMPORT  -----   function
;_initAnimations                     IMPORT  -----   function
;_initFire                           IMPORT  -----   function
;_player                             IMPORT     10   variable
;_drawLevel                          IMPORT  -----   function
;_free                               IMPORT  -----   function
;_pipeFromIndex                      IMPORT  -----   function
;_createFire                         IMPORT  -----   function
;_lookupTile                         IMPORT  -----   function
;_rleDecompress                      IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_curLevel                           IMPORT      9   variable
;copy                                 IX-25      3   variable
;tiledata                             IX-22      7   variable
;temp4                                IX-15      3   variable
;area                                 IX-12      3   variable
;data                                  IX-9      3   variable
;t                                     IX-6      3   variable
;i                                     IX-3      3   variable
;map                                   IX+6      8   parameter


; Stack Frame Size: 47 (bytes)
;       Spill Code: 0 (instruction)


;   82	
;   83	
;   84	void freeLevel() {
_freeLevel:
;   85		if(curLevel.data)
	LD	HL,(_curLevel+6)
	CALL	__icmpzero
	JR	Z,L_18
;   86			free(curLevel.data);
	LD	BC,(_curLevel+6)
	PUSH	BC
	CALL	_free
	POP	BC
;   87	}
L_18:
	RET	


;**************************** _freeLevel ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;_curLevel                           IMPORT      9   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   88	
;   89	
;   90	void drawLevel() {
_drawLevel:
	LD	HL,-16
	CALL	__frameset
;   91		uint8_t x, y;
;   92		
;   93		gfx_FillScreen(COLOR_YELLOW);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   94		for(y = 0; y < curLevel.height; y++)
	LD	(IX+-2),0
	JR	L_26
L_24:
;   95		{
;   96			for(x = 0; x < curLevel.width; x++)
	LD	(IX+-1),0
	JR	L_23
L_21:
;   97			{
;   98				tile_t tile = getTile(x, y);
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-1)
	PUSH	BC
	PEA	IX+-16
	CALL	_getTile
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-9
	LD	BC,7
	LDIR	
;   99				drawTile(tile, x, y);
	LD	IY,0
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-1)
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LEA	HL,IX+-9
	LD	BC,7
	ADD	IY,SP
	LD	DE,IY
	LDIR	
	CALL	_drawTile
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
;  100			}
L_23:
	LD	A,(IX+-1)
	LD	HL,_curLevel+4
	CP	A,(HL)
	JR	C,L_21
	INC	(IX+-2)
;  101		}
L_26:
	LD	A,(IX+-2)
	LD	HL,_curLevel+5
	CP	A,(HL)
	JR	C,L_24
;  102	
;  103	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawLevel ***************************
;Name                         Addr/Register   Size   Type
;_curLevel                           IMPORT      9   variable
;_drawTile                           IMPORT  -----   function
;_getTile                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;tile                                  IX-9      7   variable
;y                                     IX-2      1   variable
;x                                     IX-1      1   variable


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


;  104	
;  105	
;  106	
;  107	/* Draws the map and initializes necessary variables.
;  108	 * Should call 'createMap' first
;  109	 * @param *level pointer to level_t to load
;  110	 * @returns none. */
;  111	
;  112	
;  113	
;  114	/* Draws the UI that occurs after completing a level.
;  115	 * Should call 'createMap' first
;  116	 * @returns none. */
;  117	void completeLevel() {
_completeLevel:
	LD	HL,-1
	CALL	__frameset
;  118		uint8_t key;
;  119		
;  120		drawLevel();
	CALL	_drawLevel
;  121	
;  122		centeredString("Level Complete!", SCREEN_HEIGHT - 8);
	LD	BC,232
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_centeredString
	POP	BC
	POP	BC
;  123	
;  124		drawPlayer();
	CALL	_drawPlayer
;  125		// add fireworks later??
;  126		do {
L_28:
;  127			doAnimations();
	CALL	_doAnimations
;  128			gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  129		} while((key = os_GetCSC()) != sk_2nd);
	CALL	_os_GetCSC
	LD	(IX+-1),A
	CP	A,54
	JR	NZ,L_28
;  130	
;  131		nextLevel();
	CALL	_nextLevel
	LD	SP,IX
	POP	IX
	RET	


;**************************** _completeLevel ***************************
;Name                         Addr/Register   Size   Type
;_nextLevel                          IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_doAnimations                       IMPORT  -----   function
;_drawPlayer                         IMPORT  -----   function
;_centeredString                     IMPORT  -----   function
;_drawLevel                          IMPORT  -----   function
;key                                   IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__12:
	DB	"Level Complete!"
	DB	0
	XREF _rleDecompress:ROM
	XREF _flows:ROM
	XREF _drawPlayer:ROM
	XREF _initAnimations:ROM
	XREF _doAnimations:ROM
	XREF _centeredString:ROM
	XREF _drawTile:ROM
	XREF _lookupTile:ROM
	XREF _pipeFromIndex:ROM
	XREF _getTile:ROM
	XREF _createFire:ROM
	XREF _initFire:ROM
	XREF _nextLevel:ROM
	XREF _curLevel:ROM
	XREF _player:ROM
	XREF _Array_Clear:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_FillScreen:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _os_GetCSC:ROM
	XREF __imulu:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _completeLevel
	XDEF _drawLevel
	XDEF _freeLevel
	XDEF _loadMap
	XDEF _pipes
	END
