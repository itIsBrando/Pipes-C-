; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\WATER.C"
	.assume ADL=1
	SEGMENT BSS
_flows:
	DS	12
_waterSpriteBuffer:
	DS	66
	SEGMENT DATA
_keepWaterTick:
	DB	0
;    1	#include "main.h"
;    2	#include "array.h"
;    3	#include "fire.h"
;    4	#include "tilemap.h"
;    5	#include "sprites.h"
;    6	#include "engine.h"
;    7	#include "graphics.h"
;    8	#include "water.h"
;    9	#include "images/water_1.h"
;   10	
;   11	
;   12	#define createPosition(p, x, y) Position p; p.x = x; p.y = y;
;   13	#define IS_SPOUT(tile) ((tile.flags & 0x4) != 0)
;   14	
;   15	Array flows;
;   16	uint8_t waterSpriteBuffer[66];
;   17	static bool keepWaterTick = false;
	SEGMENT CODE
;   18	
;   19	
;   20	void drainWater() {
_drainWater:
	LD	HL,-24
	CALL	__frameset
;   21	    const uint8_t width = curLevel->width;
	LD	IY,(_curLevel)
	LD	A,(IY+4)
	LD	(IX+-13),A
;   22	    const uint8_t height = curLevel->height;
	LD	IY,(_curLevel)
	LD	A,(IY+5)
	LD	(IX+-14),A
;   23	    uint8_t y, x;
;   24	
;   25	    for(y = 0; y < height; y++)
	LD	(IX+-1),0
	JR	L_18
L_16:
;   26	    {
;   27	        for (x = 0; x < width; x++)
	LD	(IX+-2),0
	JR	L_15
L_13:
;   28	        {
;   29	            tile_t tile = getTile(x, y);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-2)
	PUSH	BC
	PEA	IX+-24
	CALL	_getTile
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-9
	LD	BC,7
	LDIR	
;   30	
;   31	            // find spout
;   32	            if(IS_PIPE(tile) && tile.data.hasWater)
	LD	HL,(IX+-6)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_11
	LEA	BC,IX+-9
	LD	(IX+-17),BC
	LD	IY,(IX+-17)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_11
;   33	            {
;   34	                tile.data.hasWater = false;
	LD	IY,(IX+-17)
	LD	(IY+0),0
;   35	            // reignite blue fires
;   36	            } else if(tile.type == TYPE_FIRE && tile.data.fire.isPersistent && !tile.data.fire.isLit)
	JR	L_12
L_11:
	LD	BC,2
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_9
	LEA	BC,IX+-9
	LD	(IX+-12),BC
	LD	IY,(IX+-12)
	LD	A,(IY+1)
	OR	A,A
	JR	Z,L_9
	LD	IY,(IX+-12)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_9
;   37	            {
;   38	                tile.data.fire.isLit = true;
	LD	IY,(IX+-12)
	LD	(IY+0),1
;   39	                tile.id = TILE_BLUE_FIRE_1;
	LD	(IX+-3),16
;   40	                firesAlive++;
	LD	A,(_firesAlive)
	INC	A
	LD	(_firesAlive),A
;   41	            // remove any water tiles
;   42	            } else if(tile.id == TILE_WATER)
	JR	L_12
L_9:
	LD	A,(IX+-3)
	CP	A,18
	JR	NZ,L_14
;   43	            {
;   44	                tile.id = 0;
	LD	(IX+-3),0
;   45	                removeAnimation(x, y);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-2)
	PUSH	BC
	CALL	_removeAnimation
	POP	BC
	POP	BC
;   46	            } else {
;   47	                continue;
;   48	            }
L_12:
;   49	
;   50	            setTile(x, y, &tile);
	PEA	IX+-9
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-2)
	PUSH	BC
	CALL	_setTile
	POP	BC
	POP	BC
	POP	BC
;   51	        }
L_14:
	INC	(IX+-2)
L_15:
	LD	A,(IX+-2)
	CP	A,(IX+-13)
	JR	C,L_13
	INC	(IX+-1)
;   52	        
;   53	    }
L_18:
	LD	A,(IX+-1)
	CP	A,(IX+-14)
	JR	C,L_16
;   54	
;   55	    player.isWaterFlowing = false;
	XOR	A,A
	LD	(_player+7),A
;   56	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _drainWater ***************************
;Name                         Addr/Register   Size   Type
;_player                             IMPORT     10   variable
;_setTile                            IMPORT  -----   function
;_removeAnimation                    IMPORT  -----   function
;_firesAlive                         IMPORT      1   variable
;_getTile                            IMPORT  -----   function
;_curLevel                           IMPORT      3   variable
;G_0                                  IX-17      3   variable
;height                               IX-14      1   variable
;width                                IX-13      1   variable
;G_1                                  IX-12      3   variable
;tile                                  IX-9      7   variable
;x                                     IX-2      1   variable
;y                                     IX-1      1   variable


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


;   57	
;   58	
;   59	void initFlows() {
_initFlows:
	LD	HL,-18
	CALL	__frameset
;   60	    const uint8_t width = curLevel->width;
	LD	IY,(_curLevel)
	LD	A,(IY+4)
	LD	(IX+-3),A
;   61	    const uint8_t height = curLevel->height;
	LD	IY,(_curLevel)
	LD	A,(IY+5)
	LD	(IX+-4),A
;   62	    uint8_t y, x;
;   63	
;   64	    player.isWaterFlowing = true;
;   65	    keepWaterTick = false;
;   66	
;   67	    Array_Clear(&flows);
	LD	BC,_flows
	PUSH	BC
	LD	A,1
	LD	(_player+7),A
	XOR	A,A
	LD	(_keepWaterTick),A
	CALL	_Array_Clear
	POP	BC
;   68	
;   69	    for(y = 0; y < height; y++)
	LD	(IX+-1),0
	JR	L_29
L_27:
;   70	    {
;   71	        for (x = 0; x < width; x++)
	LD	(IX+-2),0
	JR	L_26
L_24:
;   72	        {
;   73	            // find spout
;   74	            tile_t tile = chkCollision(x, y);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-2)
	PUSH	BC
	PEA	IX+-18
	CALL	_chkCollision
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-11
	LD	BC,7
	LDIR	
;   75	
;   76	
;   77	            if(IS_SPOUT(tile))
	LD	A,(IX+-9)
	AND	A,4
	JR	Z,L_25
;   78	            {
;   79	                createFlow(x, y, pipeFromIndex(tile.id)->directions);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	CALL	_pipeFromIndex
	POP	BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-2)
	PUSH	BC
	CALL	_createFlow
	POP	BC
	POP	BC
	POP	BC
;   80	                keepWaterTick = true;
	LD	A,1
	LD	(_keepWaterTick),A
;   81	            }
;   82	        }
L_25:
	INC	(IX+-2)
L_26:
	LD	A,(IX+-2)
	CP	A,(IX+-3)
	JR	C,L_24
	INC	(IX+-1)
;   83	        
;   84	    }
L_29:
	LD	A,(IX+-1)
	CP	A,(IX+-4)
	JR	C,L_27
;   85	
;   86	    tickFlows();
	CALL	_tickFlows
;   87	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _initFlows ***************************
;Name                         Addr/Register   Size   Type
;_tickFlows                          IMPORT  -----   function
;_pipeFromIndex                      IMPORT  -----   function
;_createFlow                         IMPORT  -----   function
;_chkCollision                       IMPORT  -----   function
;_flows                              STATIC     12   variable
;_Array_Clear                        IMPORT  -----   function
;_keepWaterTick                      STATIC      1   variable
;_player                             IMPORT     10   variable
;_curLevel                           IMPORT      3   variable
;tile                                 IX-11      7   variable
;height                                IX-4      1   variable
;width                                 IX-3      1   variable
;x                                     IX-2      1   variable
;y                                     IX-1      1   variable


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


;   88	
;   89	
;   90	bool createFlow(uint8_t x, uint8_t y, Direction dir) {
_createFlow:
	LD	HL,-10
	CALL	__frameset
;   91	    tile_t *tile = getTilePointer(x, y);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_getTilePointer
	POP	BC
	POP	BC
	LD	(IX+-5),HL
;   92	    flow_t f;
;   93	
;   94	    createPosition(position, x, y);
	LD	A,(IX+6)
	LD	(IX+-2),A
	LD	A,(IX+9)
	LD	(IX+-1),A
;   95	    f.position = position;
	LEA	DE,IX+-10
	LEA	HL,IX+-2
	LD	BC,2
	LDIR	
;   96	    f.spreadDirection = dir;
	LD	BC,(IX+12)
	LD	(IX+-8),BC
;   97	
;   98	    Array_Append(&flows, &f);
	PEA	IX+-10
	LD	BC,_flows
	PUSH	BC
	CALL	_Array_Append
	POP	BC
	POP	BC
;   99	    
;  100	    //dbg_sprintf(dbgerr, "createflow dir: %d, array dir: %d, (%d,%d)\n", f.spreadDirection, newF->spreadDirection, newF->position.x, newF->position.y);
;  101	    
;  102	    tile->data.hasWater = true;
	LD	IY,(IX+-5)
	LD	(IY+0),1
;  103	    setTile(x, y, tile);
	LD	BC,(IX+-5)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_setTile
	POP	BC
	POP	BC
	POP	BC
;  104	    
;  105	    return true;
	LD	A,1
;  106	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _createFlow ***************************
;Name                         Addr/Register   Size   Type
;_setTile                            IMPORT  -----   function
;_flows                              STATIC     12   variable
;_Array_Append                       IMPORT  -----   function
;_getTilePointer                     IMPORT  -----   function
;f                                    IX-10      5   variable
;tile                                  IX-5      3   variable
;position                              IX-2      2   variable
;dir                                  IX+12      3   parameter
;y                                     IX+9      1   parameter
;x                                     IX+6      1   parameter


; Stack Frame Size: 25 (bytes)
;       Spill Code: 0 (instruction)


;  107	
;  108	
;  109	void tickFlows() {
_tickFlows:
	LD	HL,-4
	CALL	__frameset
;  110	    uint8_t i;
;  111	
;  112	    if(!keepWaterTick)
	LD	A,(_keepWaterTick)
	OR	A,A
	JR	Z,L_42
;  113	        return;
;  114	
;  115	    // set to false, but if we get a flow that is still going, set to true
;  116	    keepWaterTick = false;
	XOR	A,A
	LD	(_keepWaterTick),A
;  117	
;  118	    foreach(flows, i) {
	LD	(IX+-1),0
	JR	L_41
L_39:
;  119	        const flow_t *f = (flow_t*)Array_Get(&flows, i);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,_flows
	PUSH	BC
	CALL	_Array_Get
	POP	BC
	POP	BC
	LD	(IX+-4),HL
;  120	
;  121	        if(doFlow(f))
	LD	BC,HL
	PUSH	BC
	CALL	_doFlow
	POP	BC
	OR	A,A
	JR	Z,L_38
;  122	            keepWaterTick = true;
	LD	A,1
	LD	(_keepWaterTick),A
;  123	        else
	JR	L_40
L_38:
;  124	            i--;
	DEC	(IX+-1)
;  125	    }
L_40:
	INC	(IX+-1)
L_41:
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(_flows+6)
	SBC	HL,BC
	JR	C,L_39
;  126	}
L_42:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _tickFlows ***************************
;Name                         Addr/Register   Size   Type
;_doFlow                             IMPORT  -----   function
;_flows                              STATIC     12   variable
;_Array_Get                          IMPORT  -----   function
;_keepWaterTick                      STATIC      1   variable
;f                                     IX-4      3   variable
;i                                     IX-1      1   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


;  127	
;  128	
;  129	bool doFlow(flow_t *self) {
_doFlow:
	LD	HL,-57
	CALL	__frameset
;  130	    const Direction d = self->spreadDirection;
	LD	IY,(IX+6)
	LD	BC,(IY+2)
	LD	(IX+-9),BC
;  131	    Direction directions[4];
;  132	    uint8_t i;
;  133	    bool hasMoved = false;
	LD	(IX+-10),0
;  134	
;  135	    directions[0] = (d & BIT_RIGHT) ? RIGHT : -1;
	LD	A,(IX+-9)
	AND	A,2
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_45
	LD	BC,1
	LD	(IX+-13),BC
	JR	L_46
L_45:
	LD	BC,16777215
	LD	(IX+-13),BC
L_46:
	LD	BC,(IX+-13)
	LD	(IX+-49),BC
;  136	    directions[1] = (d & BIT_LEFT) ? LEFT : -1;
	LD	A,(IX+-9)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_49
	LD	BC,0
	LD	(IX+-22),BC
	JR	L_50
L_49:
	LD	BC,16777215
	LD	(IX+-22),BC
L_50:
	LEA	HL,IX+-46
	LD	BC,(IX+-22)
	LD	(HL),BC
;  137	    directions[2] = (d & BIT_UP) ? UP : -1;
	LD	A,(IX+-9)
	AND	A,4
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_53
	LD	BC,2
	LD	(IX+-25),BC
	JR	L_54
L_53:
	LD	BC,16777215
	LD	(IX+-25),BC
L_54:
	LEA	HL,IX+-43
	LD	BC,(IX+-25)
	LD	(HL),BC
;  138	    directions[3] = (d & BIT_DOWN) ? DOWN : -1;
	LD	A,(IX+-9)
	AND	A,8
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_57
	LD	BC,3
	LD	(IX+-28),BC
	JR	L_58
L_57:
	LD	BC,16777215
	LD	(IX+-28),BC
L_58:
	LEA	HL,IX+-40
	LD	BC,(IX+-28)
	LD	(HL),BC
;  139	
;  140	    for(i = 0; i < 4; i++)
	LD	(IX+-6),0
	JR	L_76
L_74:
;  141	    {
;  142	        if(directions[i] != -1)
	LD	BC,16777215
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IX+-49
	ADD	HL,DE
	LD	(IX+-16),HL
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_75
;  143	        {
;  144	            Position pos = facingOffset(directions[i]);
	LD	HL,(IX+-16)
	LD	BC,(HL)
	PUSH	BC
	PEA	IX+-51
	CALL	_facingOffset
	POP	BC
	POP	BC
	LEA	DE,IX+-2
	LD	BC,2
	LDIR	
;  145	            tile_t *tile;
;  146	            addPosition(&pos, self->position);
	PUSH	BC
	OR	A,A
	SBC	HL,HL
	LD	(IX+-57),HL	; spill
	ADD	HL,SP
	LD	(IX+-57),HL	; spill
	LD	IY,(IX+6)
	PEA	IX+-2
	LEA	HL,IY+0
	LD	(IX+-54),HL	; spill
	LD	HL,(IX+-57)	; unspill
	LD	DE,HL
	LD	HL,(IX+-54)	; unspill
	LD	BC,2
	LDIR	
	CALL	_addPosition
	POP	BC
	POP	BC
;  147	            tile = getTilePointerSafely(pos.x, pos.y);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-2)
	PUSH	BC
	CALL	_getTilePointerSafely
	POP	BC
	POP	BC
	LD	(IX+-5),HL
;  148	
;  149	            dbg_sprintf(dbgerr, "New Pos: (%d, %d), tile:%d, type: %d isFire: %d\n", pos.x, pos.y, tile->id, tile->type, tile->type == TYPE_FIRE);
;  150	            
;  151	            if(tile->type == TYPE_PIPE && !tile->data.hasWater)
	LD	IY,(IX+-5)
	LD	BC,(IY+3)
	LD	(IX+-19),BC
	LD	HL,BC
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_71
	LD	IY,(IX+-5)
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_71
;  152	            {
;  153	                flow_t f;
;  154	
;  155	                f.spreadDirection = pipeFromIndex(tile->id)->directions;
	LD	IY,(IX+-5)
	LD	C,(IY+6)
	LD	B,0
	PUSH	BC
	CALL	_pipeFromIndex
	POP	BC
	LD	IY,HL
	LD	A,(IY+0)
	UEXT	HL
	LD	L,A
	LD	(IX+-35),HL
;  156	                f.position = pos;
	LEA	DE,IX+-37
	LEA	HL,IX+-2
;  157	                Array_Append(&flows, &f);
	PEA	IX+-37
	LD	BC,_flows
	PUSH	BC
	LD	BC,2
	LDIR	
	CALL	_Array_Append
	POP	BC
	POP	BC
;  158	            
;  159	                tile->data.hasWater = true;
	LD	IY,(IX+-5)
	LD	(IY+0),1
;  160	                setTile(pos.x, pos.y, tile);
	LD	BC,(IX+-5)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-2)
	PUSH	BC
	CALL	_setTile
	POP	BC
	POP	BC
	POP	BC
;  161	                dbg_sprintf(dbgerr, "found flow at (%d, %d)\n", pos.x, pos.y);
;  162	                
;  163	                hasMoved = true;
	LD	(IX+-10),1
;  164	            } else if (tile->type == TYPE_FIRE && tile->data.fire.isLit)
	JR	L_75
L_71:
	LD	BC,2
	LD	HL,(IX+-19)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_69
	LD	IY,(IX+-5)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_69
;  165	            {
;  166	                
;  167	                // win if no fires remain
;  168	                if(!putOutFire(tile, pos.x, pos.y))
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-2)
	PUSH	BC
	LD	BC,(IX+-5)
	PUSH	BC
	CALL	_putOutFire
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_66
;  169	                {
;  170	                    completeLevel();
	CALL	_completeLevel
;  171	                    // when we complete level, any active flows do not get destroyed
;  172	                    return false;
	XOR	A,A
	JR	L_80
;  173	                }
L_66:
;  174	
;  175	                setTile(pos.x, pos.y, tile);
	LD	BC,(IX+-5)
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-2)
	PUSH	BC
	CALL	_setTile
	POP	BC
	POP	BC
	POP	BC
;  176	            } else if(tile->id == 0)
	JR	L_75
L_69:
	LD	IY,(IX+-5)
	LD	A,(IY+6)
	OR	A,A
	JR	NZ,L_75
;  177	            {
;  178	                // if we found neither a fire or a pipe, then spill water
;  179	                animation_t a;
;  180	                
;  181	                // create the water animation
;  182	                a.x = pos.x;
	LD	A,(IX+-2)
	LD	(IX+-30),A
;  183	                a.y = pos.y;
	LD	A,(IX+-1)
	LD	(IX+-29),A
;  184	                Array_Append(&animationTile, &a);
	PEA	IX+-32
	LD	BC,_animationTile
	PUSH	BC
	CALL	_Array_Append
	POP	BC
	POP	BC
;  185	                
;  186	                // set physical type
;  187	                tile->id = TILE_WATER;
	LD	IY,(IX+-5)
	LD	(IY+6),18
;  188	                
;  189	            }
;  190	            
;  191	        } 
;  192	    }
L_75:
	INC	(IX+-6)
L_76:
	LD	A,(IX+-6)
	CP	A,4
	JR	C,L_74
;  193	
;  194	    deleteFlow(self);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_deleteFlow
	POP	BC
;  195	
;  196	    if(hasMoved)
	LD	A,(IX+-10)
	OR	A,A
	JR	Z,L_79
;  197	        return true;
	LD	A,1
	JR	L_80
;  198	    else
L_79:
;  199	        return false;
	XOR	A,A
;  200	    
;  201	}
L_80:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _doFlow ***************************
;Name                         Addr/Register   Size   Type
;_deleteFlow                         IMPORT  -----   function
;_animationTile                      IMPORT     12   variable
;_completeLevel                      IMPORT  -----   function
;_putOutFire                         IMPORT  -----   function
;_setTile                            IMPORT  -----   function
;_flows                              STATIC     12   variable
;_Array_Append                       IMPORT  -----   function
;_pipeFromIndex                      IMPORT  -----   function
;_getTilePointerSafely               IMPORT  -----   function
;_addPosition                        IMPORT  -----   function
;_facingOffset                       IMPORT  -----   function
;directions                           IX-49     12   variable
;f                                    IX-37      5   variable
;a                                    IX-32      4   variable
;temp55                               IX-28      3   variable
;temp51                               IX-25      3   variable
;temp47                               IX-22      3   variable
;G_5                                  IX-19      3   variable
;G_3                                  IX-16      3   variable
;temp43                               IX-13      3   variable
;hasMoved                             IX-10      1   variable
;d                                     IX-9      3   variable
;i                                     IX-6      1   variable
;tile                                  IX-5      3   variable
;pos                                   IX-2      2   variable
;self                                  IX+6      3   parameter


; Stack Frame Size: 66 (bytes)
;       Spill Code: -1 (instruction)


;  202	
;  203	
;  204	void deleteFlow(flow_t *self) {
_deleteFlow:
	LD	HL,-1
	CALL	__frameset
;  205	    // must be able to look up stuff
;  206	    uint8_t i;
;  207	
;  208	    // Array_Remove(&flows, self);
;  209	    foreach(flows, i)
	LD	(IX+-1),0
	JR	L_85
L_83:
;  210	    {
;  211	        if((flow_t *)Array_Get(&flows, i) == self)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,_flows
	PUSH	BC
	CALL	_Array_Get
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_84
;  212	            Array_RemoveAt(&flows, i);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,_flows
	PUSH	BC
	CALL	_Array_RemoveAt
	POP	BC
	POP	BC
;  213	            // Array_Remove(&flows, self);
;  214	    }
L_84:
	INC	(IX+-1)
L_85:
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(_flows+6)
	SBC	HL,BC
	JR	C,L_83
;  215	
;  216	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _deleteFlow ***************************
;Name                         Addr/Register   Size   Type
;_Array_RemoveAt                     IMPORT  -----   function
;_flows                              STATIC     12   variable
;_Array_Get                          IMPORT  -----   function
;i                                     IX-1      1   variable
;self                                  IX+6      3   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: -1 (instruction)


;  217	
;  218	void animateWater() {
_animateWater:
	LD	HL,-4
	CALL	__frameset
;  219	    uint8_t x, y;
;  220	    const uint8_t i = animationTimer;
;  221	
;  222	    for(y = 0; y < 8; y++)
	LD	(IX+-2),0
	JR	L_94
L_92:
;  223	    {
;  224	        const uint8_t yWrap = ((y + i) & 7) << 3;
	LD	A,(_animationTimer)
	ADD	A,(IX+-2)
	AND	A,7
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	(IX+-3),A
;  225	        const uint8_t yPos = y << 3;
	LD	A,(IX+-2)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	(IX+-4),A
;  226	
;  227	        for(x = 0; x < 8; x++)
	LD	(IX+-1),0
	JR	L_91
L_89:
;  228	        {
;  229	            waterSpriteBuffer[2 + ((x - i) & 7) + yWrap] = water_1_data[2 + x + yPos];
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	INC	BC
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(IX+-1)
	LD	BC,_water_1_data
	ADD	HL,BC
	LD	IY,HL
	UEXT	HL
	LD	L,A
	LD	A,(_animationTimer)
	LD	BC,HL
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	LD	A,L
	AND	A,7
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	INC	BC
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	A,(IY)
	LD	BC,_waterSpriteBuffer
	ADD	HL,BC
	LD	(HL),A
	INC	(IX+-1)
;  230	        }
L_91:
	LD	A,(IX+-1)
	CP	A,8
	JR	C,L_89
	INC	(IX+-2)
;  231	    }
L_94:
	LD	A,(IX+-2)
	CP	A,8
	JR	C,L_92
;  232	
	LD	SP,IX
	POP	IX
	RET	


;**************************** _animateWater ***************************
;Name                         Addr/Register   Size   Type
;_waterSpriteBuffer                  STATIC     66   variable
;_water_1_data                       IMPORT     66   variable
;_animationTimer                     IMPORT      1   variable
;yPos                                  IX-4      1   variable
;yWrap                                 IX-3      1   variable
;y                                     IX-2      1   variable
;x                                     IX-1      1   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: -1 (instruction)


	XREF _water_1_data:ROM
	XREF _animationTimer:ROM
	XREF _animationTile:ROM
	XREF _removeAnimation:ROM
	XREF _pipeFromIndex:ROM
	XREF _setTile:ROM
	XREF _getTilePointerSafely:ROM
	XREF _getTilePointer:ROM
	XREF _getTile:ROM
	XREF _facingOffset:ROM
	XREF _chkCollision:ROM
	XREF _addPosition:ROM
	XREF _completeLevel:ROM
	XREF _putOutFire:ROM
	XREF _firesAlive:ROM
	XREF _curLevel:ROM
	XREF _player:ROM
	XREF _Array_Clear:ROM
	XREF _Array_Get:ROM
	XREF _Array_RemoveAt:ROM
	XREF _Array_Append:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XDEF _animateWater
	XDEF _deleteFlow
	XDEF _doFlow
	XDEF _tickFlows
	XDEF _createFlow
	XDEF _initFlows
	XDEF _drainWater
	XDEF _waterSpriteBuffer
	XDEF _flows
	END
